- task: Write a function named 'solve' that takes a single integer input and returns
    its square.
  test_cases:
  - expected_output: 4
    inputs:
    - 2
  - expected_output: 9
    inputs:
    - 3
  - expected_output: 16
    inputs:
    - 4
- task: Write a function named 'solve' that takes two integers and returns their sum.
  test_cases:
  - expected_output: 3
    inputs:
    - 1
    - 2
  - expected_output: 12
    inputs:
    - 5
    - 7
  - expected_output: 0
    inputs:
    - 0
    - 0
- task: Write a function named 'solve' that takes a list of integers and returns the
    maximum value.
  test_cases:
  - expected_output: 5
    inputs:
    - - 1
      - 2
      - 3
      - 4
      - 5
  - expected_output: -1
    inputs:
    - - -1
      - -2
      - -3
      - -4
  - expected_output: 200
    inputs:
    - - 100
      - 50
      - 200
      - 150
- task: Write a function named 'solve' that takes a string as input and returns it
    capitalized.
  test_cases:
  - expected_output: HELLO
    inputs:
    - hello
  - expected_output: PYTHON
    inputs:
    - python
  - expected_output: HELLO WORLD
    inputs:
    - hello world
- task: Write a function named 'solve' that takes two integers and returns True if
    they are equal, False otherwise.
  test_cases:
  - expected_output: true
    inputs:
    - 2
    - 2
  - expected_output: false
    inputs:
    - 3
    - 4
  - expected_output: true
    inputs:
    - -1
    - -1
- task: Write a function named 'solve' that takes a list of integers and returns a
    list containing only the even numbers.
  test_cases:
  - expected_output:
    - 2
    - 4
    - 6
    - 8
    - 10
    inputs:
    - - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
  - expected_output:
    - -2
    - 0
    - 2
    inputs:
    - - -2
      - -1
      - 0
      - 1
      - 2
  - expected_output: []
    inputs:
    - - 3
      - 5
      - 7
      - 9
- task: Write a function named 'solve' that takes a list of strings and returns a
    list containing only the strings longer than 5 characters.
  test_cases:
  - expected_output:
    - banana
    - orange
    inputs:
    - - apple
      - banana
      - orange
      - grape
  - expected_output:
    - Python
    - JavaScript
    inputs:
    - - Python
      - Java
      - C++
      - JavaScript
  - expected_output: []
    inputs:
    - - car
      - bike
      - bus
      - train
- task: Write a function named 'solve' that takes a string and returns the number
    of vowels in the string.
  test_cases:
  - expected_output: 2
    inputs:
    - hello
  - expected_output: 1
    inputs:
    - python
  - expected_output: 3
    inputs:
    - hello world
- task: Write a function named 'solve' that takes a string and returns True if it
    is a palindrome, False otherwise.
  test_cases:
  - expected_output: true
    inputs:
    - racecar
  - expected_output: false
    inputs:
    - hello
  - expected_output: true
    inputs:
    - level
- task: Write a function named 'solve' that takes a list of integers and returns a
    list containing only the numbers divisible by 3.
  test_cases:
  - expected_output:
    - 3
    - 6
    - 9
    inputs:
    - - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
  - expected_output:
    - 0
    - 3
    - 6
    inputs:
    - - -2
      - -1
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
  - expected_output:
    - 9
    inputs:
    - - 7
      - 8
      - 9
      - 10
- task: Write a function named 'solve' that takes a string and returns the number
    of words in the string.
  test_cases:
  - expected_output: 2
    inputs:
    - hello world
  - expected_output: 3
    inputs:
    - python is awesome
  - expected_output: 5
    inputs:
    - Flask is a micro web framework
- task: Write a function named 'solve' that takes a list of integers and returns the
    average of all positive integers in the list.
  test_cases:
  - expected_output: 3.0
    inputs:
    - - 1
      - 2
      - 3
      - 4
      - 5
  - expected_output: None
    inputs:
    - - -1
      - -2
      - -3
      - -4
      - -5
  - expected_output: 3.0
    inputs:
    - - 1
      - -2
      - 3
      - -4
      - 5
- task: Write a function named 'solve' that takes a string and returns the string
    with all whitespace removed.
  test_cases:
  - expected_output: helloworld
    inputs:
    - hello world
  - expected_output: Python
    inputs:
    - '  Python  '
  - expected_output: helloworld
    inputs:
    - '  hello  world  '
- task: Write a function named 'solve' that takes a list of integers and returns the
    number of occurrences of the number 5 in the list.
  test_cases:
  - expected_output: 1
    inputs:
    - - 1
      - 2
      - 3
      - 4
      - 5
  - expected_output: 5
    inputs:
    - - 5
      - 5
      - 5
      - 5
      - 5
  - expected_output: 0
    inputs:
    - - 1
      - 2
      - 3
      - 4
- task: Write a function named 'solve' that takes a list of integers and returns the
    number of occurrences of each integer in a dictionary.
  test_cases:
  - expected_output:
      1: 1
      2: 1
      3: 1
      4: 1
      5: 1
    inputs:
    - - 1
      - 2
      - 3
      - 4
      - 5
  - expected_output:
      5: 5
    inputs:
    - - 5
      - 5
      - 5
      - 5
      - 5
  - expected_output:
      1: 1
      2: 1
      3: 1
      4: 1
    inputs:
    - - 1
      - 2
      - 3
      - 4
- task: Write a function named 'solve' that takes a string and returns True if it
    contains only alphabetic characters, False otherwise.
  test_cases:
  - expected_output: true
    inputs:
    - hello
  - expected_output: false
    inputs:
    - '123'
  - expected_output: false
    inputs:
    - Python3
- task: Write a function named 'solve' that takes a list of integers and returns the
    smallest integer in the list.
  test_cases:
  - expected_output: 1
    inputs:
    - - 1
      - 2
      - 3
      - 4
      - 5
  - expected_output: 1
    inputs:
    - - 5
      - 4
      - 3
      - 2
      - 1
  - expected_output: -5
    inputs:
    - - -1
      - -2
      - -3
      - -4
      - -5
- task: Write a function named 'solve' that takes a string and returns the string
    with each character repeated twice.
  test_cases:
  - expected_output: hheelllloo
    inputs:
    - hello
  - expected_output: PPyytthhoonn
    inputs:
    - Python
  - expected_output: FFllaasskk
    inputs:
    - Flask
- task: Write a function named 'solve' that takes a string and returns the string
    reversed, but without changing the case of the characters.
  test_cases:
  - expected_output: olleH
    inputs:
    - Hello
  - expected_output: nohtyP
    inputs:
    - Python
  - expected_output: ksalF
    inputs:
    - Flask
- task: Write a function named 'solve' that takes a string and returns True if it
    is a valid email address (has the format 'username@example.com'), False otherwise.
  test_cases:
  - expected_output: true
    inputs:
    - user@example.com
  - expected_output: false
    inputs:
    - user@example
  - expected_output: false
    inputs:
    - userexample.com
- task: Write a function named 'solve' that takes a string and returns True if it
    contains only digits, False otherwise.
  test_cases:
  - expected_output: true
    inputs:
    - '123'
  - expected_output: false
    inputs:
    - 12a3
  - expected_output: false
    inputs:
    - Python3
- task: Write a function named 'solve' that takes two strings and returns True if
    they are equal, False otherwise.
  test_cases:
  - expected_output: true
    inputs:
    - hello
    - hello
  - expected_output: false
    inputs:
    - hello
    - world
  - expected_output: true
    inputs:
    - python
    - python
- task: Write a function named 'solve' that takes a list of strings and returns the
    longest string.
  test_cases:
  - expected_output: banana
    inputs:
    - - apple
      - banana
      - orange
      - grape
  - expected_output: train
    inputs:
    - - car
      - bike
      - bus
      - train
  - expected_output: elephant
    inputs:
    - - elephant
      - iguana
      - octopus
- task: Write a function named 'solve' that takes a list of integers and returns the
    count of pairs of adjacent elements that are equal.
  test_cases:
  - expected_output: 2
    inputs:
    - - 1
      - 2
      - 2
      - 3
      - 4
      - 4
      - 4
      - 5
  - expected_output: 3
    inputs:
    - - 1
      - 1
      - 2
      - 3
      - 3
      - 3
      - 4
      - 5
  - expected_output: 0
    inputs:
    - - 1
      - 2
      - 3
      - 4
      - 5
- task: Write a function named 'solve' that takes a list of integers and returns the
    count of distinct prime factors in the list.
  test_cases:
  - expected_output: 3
    inputs:
    - - 6
      - 8
      - 12
      - 15
      - 21
  - expected_output: 2
    inputs:
    - - 10
      - 11
      - 12
      - 13
      - 14
  - expected_output: 1
    inputs:
    - - 15
      - 16
      - 17
      - 18
      - 19
- task: Write a function named 'solve' that takes a list of integers and returns a
    list of their digital roots.
  test_cases:
  - expected_output:
    - 6
    - 6
    - 6
    inputs:
    - - 123
      - 456
      - 789
  - expected_output:
    - 3
    - 6
    - 9
    inputs:
    - - 111
      - 222
      - 333
  - expected_output:
    - 9
    - 1
    - 2
    inputs:
    - - 999
      - 1000
      - 1001
- task: Write a function named 'solve' that takes a list of integers and returns True
    if the list is sorted in ascending order, False otherwise.
  test_cases:
  - expected_output: true
    inputs:
    - - 1
      - 2
      - 3
      - 4
      - 5
  - expected_output: false
    inputs:
    - - 5
      - 4
      - 3
      - 2
      - 1
  - expected_output: false
    inputs:
    - - 1
      - 3
      - 2
      - 4
      - 5
- task: Write a function named 'solve' that takes a list of strings and returns True
    if all strings have the same length, False otherwise.
  test_cases:
  - expected_output: false
    inputs:
    - - apple
      - banana
      - orange
      - grape
  - expected_output: true
    inputs:
    - - cat
      - dog
      - elephant
      - lion
  - expected_output: true
    inputs:
    - - Hello
      - world
- task: Write a function named 'solve' that takes an integer and returns its factorial.
  test_cases:
  - expected_output: 1
    inputs:
    - 1
  - expected_output: 2
    inputs:
    - 2
  - expected_output: 6
    inputs:
    - 3
  - expected_output: 24
    inputs:
    - 4
- task: Write a function named 'solve' that takes an integer and returns its absolute
    value.
  test_cases:
  - expected_output: 1
    inputs:
    - -1
  - expected_output: 2
    inputs:
    - 2
  - expected_output: 10
    inputs:
    - -10
- task: Write a function named 'solve' that takes two integers and returns the greatest
    common divisor.
  test_cases:
  - expected_output: 3
    inputs:
    - 12
    - 15
  - expected_output: 6
    inputs:
    - 24
    - 30
  - expected_output: 12
    inputs:
    - 48
    - 72
- task: Write a function named 'solve' that takes an integer and returns its binary
    representation.
  test_cases:
  - expected_output: '10'
    inputs:
    - 2
  - expected_output: '11'
    inputs:
    - 3
  - expected_output: '100'
    inputs:
    - 4
- task: Write a function named 'solve' that takes two integers and returns their arithmetic
    mean.
  test_cases:
  - expected_output: 1.5
    inputs:
    - 1
    - 2
  - expected_output: 3.5
    inputs:
    - 3
    - 4
  - expected_output: 0
    inputs:
    - 0
    - 0
- task: Write a function named 'solve' that takes an integer and returns its reverse.
  test_cases:
  - expected_output: 321
    inputs:
    - 123
  - expected_output: 654
    inputs:
    - 456
  - expected_output: 987
    inputs:
    - 789
- task: Write a function named 'solve' that takes an integer input and returns the
    sum of all digits in the number.
  test_cases:
  - expected_output: 6
    inputs:
    - 123
  - expected_output: 9
    inputs:
    - 45
  - expected_output: 0
    inputs:
    - 0
- task: Write a function named 'solve' that takes a string input and returns the first
    character.
  test_cases:
  - expected_output: h
    inputs:
    - hello
  - expected_output: w
    inputs:
    - world
  - expected_output: a
    inputs:
    - abc
- task: Write a function named 'solve' that takes two strings and returns their concatenation.
  test_cases:
  - expected_output: helloworld
    inputs:
    - hello
    - world
  - expected_output: abcdef
    inputs:
    - abc
    - def
  - expected_output: ''
    inputs:
    - ''
    - ''
