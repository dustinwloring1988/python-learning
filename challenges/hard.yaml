- task: "Write a function named 'solve' that takes a list of integers and returns a list containing only the prime numbers."
  test_cases:
    - inputs: [[2, 3, 4, 5, 6, 7, 8, 9, 10]]
      expected_output: [2, 3, 5, 7]
    - inputs: [[11, 12, 13, 14, 15]]
      expected_output: [11, 13]
    - inputs: [[16, 17, 18, 19, 20]]
      expected_output: [17, 19]

- task: "Write a function named 'solve' that takes a list of strings and returns the list sorted in alphabetical order."
  test_cases:
    - inputs: [["banana", "apple", "orange", "grape"]]
      expected_output: ["apple", "banana", "grape", "orange"]
    - inputs: [["Python", "Java", "C++", "JavaScript"]]
      expected_output: ["C++", "Java", "JavaScript", "Python"]
    - inputs: [["car", "bike", "bus", "train"]]
      expected_output: ["bike", "bus", "car", "train"]

- task: "Write a function named 'solve' that takes two strings and returns True if they are anagrams, False otherwise."
  test_cases:
    - inputs: ["listen", "silent"]
      expected_output: True
    - inputs: ["hello", "world"]
      expected_output: False
    - inputs: ["evil", "vile"]
      expected_output: True

- task: "Write a function named 'solve' that takes a list of integers and returns the sum of all prime numbers in the list."
  test_cases:
    - inputs: [[2, 3, 4, 5, 6, 7, 8, 9, 10]]
      expected_output: 17
    - inputs: [[11, 12, 13, 14, 15]]
      expected_output: 24
    - inputs: [[16, 17, 18, 19, 20]]
      expected_output: 36

- task: "Write a function named 'solve' that takes a list of integers and returns the product of all elements in the list."
  test_cases:
    - inputs: [[1, 2, 3, 4, 5]]
      expected_output: 120
    - inputs: [[-1, -2, -3, -4]]
      expected_output: -24
    - inputs: [[0, 100, 2]]
      expected_output: 0

- task: "Write a function named 'solve' that takes a list of strings and returns the list with duplicate strings removed."
  test_cases:
    - inputs: [["apple", "banana", "apple", "orange", "banana"]]
      expected_output: ["apple", "banana", "orange"]
    - inputs: [["cat", "dog", "cat", "dog", "elephant"]]
      expected_output: ["cat", "dog", "elephant"]
    - inputs: [["Python", "Java", "Python", "C++", "Java", "JavaScript"]]
      expected_output: ["Python", "Java", "C++", "JavaScript"]

- task: "Write a function named 'solve' that takes two strings and returns True if they are palindromes, False otherwise."
  test_cases:
    - inputs: ["racecar", "racecar"]
      expected_output: True
    - inputs: ["hello", "olleh"]
      expected_output: False
    - inputs: ["radar", "darar"]
      expected_output: True

- task: "Write a function named 'solve' that takes a list of integers and returns True if the list is sorted in non-decreasing order, False otherwise."
  test_cases:
    - inputs: [[1, 2, 3, 4, 5]]
      expected_output: True
    - inputs: [[5, 4, 3, 2, 1]]
      expected_output: False
    - inputs: [[1, 1, 2, 2, 3]]
      expected_output: True

- task: "Write a function named 'solve' that takes a list of strings and returns True if all strings have the same length, False otherwise."
  test_cases:
    - inputs: [["apple", "banana", "orange", "grape"]]
      expected_output: False
    - inputs: [["cat", "dog", "elephant", "lion"]]
      expected_output: True
    - inputs: [["Hello", "world"]]
      expected_output: True

- task: "Write a function named 'solve' that takes a list of integers and returns True if the list is a permutation of the numbers from 1 to n (where n is the length of the list), False otherwise."
  test_cases:
    - inputs: [[1, 2, 3, 4, 5]]
      expected_output: True
    - inputs: [[5, 4, 3, 2, 1]]
      expected_output: True
    - inputs: [[1, 2, 2, 3]]
      expected_output: False

- task: "Write a function named 'solve' that takes a list of integers and returns the number of elements greater than their index."
  test_cases:
    - inputs: [[1, 2, 3, 4, 5]]
      expected_output: 4
    - inputs: [[5, 4, 3, 2, 1]]
      expected_output: 1
    - inputs: [[1, 1, 2, 3, 5]]
      expected_output: 4

- task: "Write a function named 'solve' that takes a list of integers and returns True if the list contains duplicates, False otherwise."
  test_cases:
    - inputs: [[1, 2, 3, 4, 5]]
      expected_output: False
    - inputs: [[5, 4, 3, 2, 1]]
      expected_output: False
    - inputs: [[1, 2, 2, 3]]
      expected_output: True

- task: "Write a function named 'solve' that takes a list of strings and returns the longest common prefix among them."
  test_cases:
    - inputs: [["flower", "flow", "flight"]]
      expected_output: "fl"
    - inputs: [["dog", "racecar", "car"]]
      expected_output: ""
    - inputs: [["apple", "app", "application"]]
      expected_output: "app"

- task: "Write a function named 'solve' that takes a list of integers and returns the sum of all elements at even indices."
  test_cases:
    - inputs: [[1, 2, 3, 4, 5]]
      expected_output: 9
    - inputs: [[5, 4, 3, 2, 1]]
      expected_output: 9
    - inputs: [[1, 1, 2, 2, 3]]
      expected_output: 5

- task: "Write a function named 'solve' that takes a list of strings and returns the list with elements sorted by their lengths in descending order."
  test_cases:
    - inputs: [["apple", "banana", "orange", "grape"]]
      expected_output: ["banana", "orange", "grape", "apple"]
    - inputs: [["cat", "dog", "elephant", "lion"]]
      expected_output: ["elephant", "lion", "banana", "cat"]
    - inputs: [["Hello", "world"]]
      expected_output: ["world", "Hello"]

- task: "Write a function named 'solve' that takes a list of integers and returns the sum of the squares of all even numbers in the list."
  test_cases:
    - inputs: [[1, 2, 3, 4, 5]]
      expected_output: 20
    - inputs: [[5, 4, 3, 2, 1]]
      expected_output: 20
    - inputs: [[1, 1, 2, 2, 3]]
      expected_output: 8

- task: "Write a function named 'solve' that takes a list of integers and returns the sum of all elements that are greater than the previous element."
  test_cases:
    - inputs: [[1, 2, 3, 4, 5]]
      expected_output: 14
    - inputs: [[5, 4, 3, 2, 1]]
      expected_output: 0
    - inputs: [[1, 1, 2, 2, 3]]
      expected_output: 5

- task: "Write a function named 'solve' that takes a list of strings and returns True if all strings are unique (no duplicates), False otherwise."
  test_cases:
    - inputs: [["apple", "banana", "orange", "grape"]]
      expected_output: True
    - inputs: [["cat", "dog", "elephant", "lion", "cat"]]
      expected_output: False
    - inputs: [["Hello", "world"]]
      expected_output: True

- task: "Write a function named 'solve' that takes a list of integers and returns the number of elements that are strictly greater than their preceding and succeeding elements."
  test_cases:
    - inputs: [[1, 2, 3, 4, 5]]
      expected_output: 3
    - inputs: [[5, 4, 3, 2, 1]]
      expected_output: 0
    - inputs: [[1, 2, 2, 2, 3]]
      expected_output: 1

- task: "Write a function named 'solve' that takes a list of strings and returns True if the list is a palindrome (reads the same forwards and backwards), False otherwise."
  test_cases:
    - inputs: [["apple", "banana", "orange", "banana", "apple"]]
      expected_output: True
    - inputs: [["cat", "dog", "elephant", "lion"]]
      expected_output: False
    - inputs: [["Hello", "world", "Hello"]]
      expected_output: True

- task: "Write a function named 'solve' that takes a list of integers and returns True if the list contains an arithmetic sequence, False otherwise."
  test_cases:
    - inputs: [[1, 3, 5, 7, 9]]
      expected_output: True
    - inputs: [[1, 4, 7, 10]]
      expected_output: True
    - inputs: [[1, 2, 4, 8]]
      expected_output: False

- task: "Write a function named 'solve' that takes a list of strings and returns True if the list contains a word with all letters in uppercase, False otherwise."
  test_cases:
    - inputs: [["apple", "banana", "orange", "GRAPE"]]
      expected_output: True
    - inputs: [["cat", "dog", "elephant", "lion"]]
      expected_output: False
    - inputs: [["Hello", "world", "HELLO"]]
      expected_output: True

- task: "Write a function named 'solve' that takes a list of integers and returns True if the list contains a perfect square, False otherwise."
  test_cases:
    - inputs: [[1, 2, 3, 4, 5]]
      expected_output: True
    - inputs: [[5, 4, 3, 2, 1]]
      expected_output: True
    - inputs: [[1, 1, 2, 2, 3]]
      expected_output: False

- task: "Write a function named 'solve' that takes a list of integers and returns the count of numbers with an odd number of digits."
  test_cases:
    - inputs: [[1, 12, 333, 4444, 55555]]
      expected_output: 2
    - inputs: [[123, 4567, 8910]]
      expected_output: 1
    - inputs: [[0, 22, 444, 6666]]
      expected_output: 0

- task: "Write a function named 'solve' that takes a list of strings and returns the count of strings containing only vowels (a, e, i, o, u)."
  test_cases:
    - inputs: [["apple", "banana", "orange", "grape"]]
      expected_output: 2
    - inputs: [["cat", "dog", "elephant", "lion"]]
      expected_output: 0
    - inputs: [["hello", "world", "AEIOU"]]
      expected_output: 1

- task: "Write a function named 'solve' that takes a list of integers and returns True if the list is a bitonic sequence, False otherwise. A sequence is considered bitonic if there is an index i such that elements before i are in increasing order and elements after i are in decreasing order."
  test_cases:
    - inputs: [[1, 2, 3, 4, 5, 4, 3, 2, 1]]
      expected_output: True
    - inputs: [[1, 2, 3, 4, 5, 4, 3, 4, 5]]
      expected_output: False
    - inputs: [[5, 4, 3, 2, 1]]
      expected_output: True

- task: "Write a function named 'solve' that takes a list of strings and returns the count of strings containing only lowercase letters."
  test_cases:
    - inputs: [["apple", "Banana", "orange", "grape"]]
      expected_output: 3
    - inputs: [["CAT", "DOG", "ELEPHANT", "LION"]]
      expected_output: 0
    - inputs: [["hello", "world", "Python", "3.7"]]
      expected_output: 2

- task: "Write a function named 'solve' that takes a list of integers and returns the sum of the digits of the maximum number in the list."
  test_cases:
    - inputs: [[123, 456, 789]]
      expected_output: 24
    - inputs: [[111, 222, 333, 444, 555]]
      expected_output: 15
    - inputs: [[9999, 8888, 7777]]
      expected_output: 36

- task: "Write a function named 'solve' that takes a list of strings and returns True if all strings contain at least one digit, False otherwise."
  test_cases:
    - inputs: [["apple", "banana", "orange", "grape"]]
      expected_output: False
    - inputs: [["cat5", "dog10", "elephant25", "lion"]]
      expected_output: True
    - inputs: [["hello1", "world2", "Python3", "3.7"]]
      expected_output: True

- task: "Write a function named 'solve' that takes a list of integers and returns True if the list is a permutation of the numbers from 0 to n-1 (where n is the length of the list), False otherwise."
  test_cases:
    - inputs: [[0, 1, 2, 3, 4]]
      expected_output: True
    - inputs: [[1, 0, 3, 2, 4]]
      expected_output: True
    - inputs: [[1, 2, 2, 3]]
      expected_output: False

- task: "Write a function named 'solve' that takes a list of strings and returns the count of strings containing only uppercase letters."
  test_cases:
    - inputs: [["APPLE", "Banana", "ORANGE", "GRAPE"]]
      expected_output: 3
    - inputs: [["cat", "dog", "elephant", "lion"]]
      expected_output: 0
    - inputs: [["HELLO", "WORLD", "PYTHON", "3.7"]]
      expected_output: 3

- task: "Write a function named 'solve' that takes a list of integers and returns the count of elements that are divisible by their index."
  test_cases:
    - inputs: [[1, 2, 3, 4, 5]]
      expected_output: 2
    - inputs: [[5, 4, 3, 2, 1]]
      expected_output: 3
    - inputs: [[1, 1, 2, 3, 5]]
      expected_output: 0

- task: "Write a function named 'solve' that takes a list of strings and returns True if all strings contain at least one special character (non-alphanumeric), False otherwise."
  test_cases:
    - inputs: [["apple", "banana", "orange", "grape"]]
      expected_output: False
    - inputs: [["cat5", "dog10", "ele!phant25", "lion"]]
      expected_output: True
    - inputs: [["hello1", "world2", "Python3", "3.7"]]
      expected_output: False
